The ``2-matrix_divided`` module
===============================

Using ``matrix_divided``
-----------------------

Import the function:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Basic matrix division with integers:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Division of a matrix of floats:
    >>> matrix = [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]
    >>> matrix_divided(matrix, 2)
    [[0.55, 1.1, 1.65], [2.2, 2.75, 3.3]]

Division with negative numbers:
    >>> matrix = [[-1, -2, -3], [-4, -5, -6]]
    >>> matrix_divided(matrix, 2)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, -2)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

Mixed integers and floats:
    >>> matrix = [[1, 2.5, 3], [4.5, 5, 6.5]]
    >>> matrix_divided(matrix, 2)
    [[0.5, 1.25, 1.5], [2.25, 2.5, 3.25]]

Testing with decimal divisor:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 2.5)
    [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

The original matrix is not modified:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> result = matrix_divided(matrix, 3)
    >>> matrix
    [[1, 2, 3], [4, 5, 6]]

Testing with large numbers:
    >>> matrix = [[1000, 2000], [3000, 4000]]
    >>> matrix_divided(matrix, 1000)
    [[1.0, 2.0], [3.0, 4.0]]

Testing with very small numbers:
    >>> matrix = [[0.001, 0.002], [0.003, 0.004]]
    >>> matrix_divided(matrix, 0.001)
    [[1.0, 2.0], [3.0, 4.0]]

Testing error cases - invalid matrix (not a list):
    >>> matrix_divided("not a matrix", 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing error cases - invalid matrix (not a list of lists):
    >>> matrix_divided([1, 2, 3], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing error cases - matrix with non-numeric elements:
    >>> matrix = [[1, 2, "3"], [4, 5, 6]]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing error cases - matrix with rows of different sizes:
    >>> matrix = [[1, 2, 3], [4, 5]]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Testing error cases - invalid divisor (not a number):
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, "2")
    Traceback (most recent call last):
    TypeError: div must be a number

Testing error cases - division by zero:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

Testing with empty matrix:
    >>> matrix_divided([], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing with a matrix containing only one row:
    >>> matrix = [[1, 2, 3]]
    >>> matrix_divided(matrix, 2)
    [[0.5, 1.0, 1.5]]

Testing with a matrix containing only one element per row:
    >>> matrix = [[1], [2]]
    >>> matrix_divided(matrix, 2)
    [[0.5], [1.0]]

Testing special float cases:
    >>> matrix = [[float('inf'), 2], [3, 4]]
    >>> matrix_divided(matrix, 2)
    [[inf, 1.0], [1.5, 2.0]]

    >>> matrix = [[1, 2], [3, 4]]
    >>> matrix_divided(matrix, float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

    >>> matrix = [[float('nan'), 2], [3, 4]]
    >>> result = matrix_divided(matrix, 2)
    >>> result[0][0] != result[0][0]  # Check if it's NaN (NaN != NaN)
    True
    >>> result[0][1]
    1.0
    >>> result[1][0]
    1.5
    >>> result[1][1]
    2.0

